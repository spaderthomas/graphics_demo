* todo
@render_refactor
Stop baking texture atlases, texture coordinates, etc on startup. 
* closed
@spader 11/6/2019: Put some more thought into the API, and the separation of the
engine from the game. Do I want to make the engine as a DLL? Is that going to
supremely fuck all of my precious debuggability? As an alternative, I could
leave the game and the engine as one binary, but separate the code out such that
it would be really easy to snip them apart when the time comes. Binaries and
consumption aside, the real reason I want to do this is to get a better handle
on the responsibilities of each part. What is the core engine actually doing,
and what parts of the code truly belong to my game? Still in the back of my mind
have the idea of someone else using this engine. Wouldn't it be cool if this
engine was a super lightweight one that you modified by (gasp) actually touching
the source code? Actions and components are packaged up with it, but you can
easily mod it to allow user ones, too.   

@spader 8/27/2020: scenes
Idea 1: Each scene is a Lua class. This doesn't work with the editor, or with
saving stuff out. You want data, not code. When stuff changes during the game,
you need to save that, and code won't work for that. 

What entities exist?
What are their locations?
What tiles exist?

Start by making the infrastructure: A list of scenes in Lua. A SceneManager in
C++. A scene class in Lua. A basic file format (in Lua) to describe what's in a
scene. Some functions on the scene class to read it in and build the scene --
what entities exist and where they are. In the future, maybe save / load
functions on entities. 


@spader 3/1/2020: Get the rendering system right. Ideally, there's a clever way
for every entity with a GC to register itself with the rendering engine. You
could probably do that in the GC constructor -- just call into some API that you
expose in C++.


@spader 3/1/2020: Inputs are kind of fucked right now. What's a good way to
handle chords of all kinds (shift included)? How do the game layers and scripts
read from the input buffer? n.b. this isn't quite done because I haven't
/implemented/ when masks are applied, but all the logic is pretty much there


@spader 3/1/2020: could prob autogenerate imgui stuff for entities
for member in entity:
  if type(member) == function then pass end
  if type(member) == number or string then display it
  if type(member) == table recurse


@spader 3/1/2020: moved engines/managers to jblow style functions
@spader 3/1/2020: fixed how inputs are masked to different layers, added inputs
to exported API
@spader 3/1/2020: found some GLFW key binding definitions
@spader 3/1/2020: wrote some basic camera code
@spader 3/1/2020: fixed the imgui binding generator 
@spader 3/1/2020: figured out how to wrap some of the stuff that doesn't cover.
@spader 3/1/2020: started porting the editor over to lua
@spader 3/1/2020: wrote a basic entity viewer 

@spader 3/1/2020: entity:print_once()
@spader 3/1/2020: tdengine.get_entity(name)
@spader 3/1/2020: finish off bitmask logic for inputs
@spader 3/1/2020: shift map
* notes
** 03/02/2020: Engine Architecture
@spader 3/2/2020: I want to avoid writing a lot of wrappers. Ideally, adding a
binding to the engine is one or two files. Most of the bindings into the engine
are going to be pretty thin wrappers. The layers look like this: 

Lowest level: ENGINE. 
Inside here, you have all the subsystems that actually do the work. The
rendering engine, the physics system, etc. 

Next level: API. 
Thin wrappers which are directly bound to Lua. The purpose of these
is to keep my Lua API nice and stable, and let me do whatever tricky things I
want with function signatures. Varargs, template stuff, whatever. Just register
a wrapper to Lua. 

Next level: SUGAR.
Thin wrappers in Lua. The purpose of these are purely sugar. For example, the
C++ API will take in integer IDs for entities, but I want to pass in the Lua
table because that looks natural. Write a wrapper that takes the Lua table and
forwards the ID to C++. 

Last level(?): COMPONENTS.
Components shouldn't be wrappers around the API per se -- they should put some
useful functionality on top of it. In other words, they talk to other components
and then decide what API functions to call. 

That doesn't seem too arduous. 
** 09/02/2020: prefabs
Here's a problem: I want to do a lot of content creation in the editor. For
example:
I want to create bounding boxes for entities in the editor.

Okay, I'm glad I did this. Why do I need prefabs? They're a good generic idea --
when there's a lot of content you want to make in the editor, you need to
serialize that out. Puting the data in a script doesn't work. Fine. Or when
you're making a game where entity types are reused often -- lots of Goombas, for
example. Then you want to have a base with sane defaults that you tweak. But I
am making neither of those games. If there are no puzzles in my game (which,
remember, keeping it simple), then there are pretty much three things in my
game:
Things you can interact with (items on the ground, save spots)
Trainers
Walls

That's seriously pretty darn close to /it/. So fuck prefabs. 
** 09/02/2020: tiles
Should the game have tiles? If it's not going to be tile-based, why aren't you
just making the background in Aseprite and laying it down as a massive image? Of
course, that picture could still be composed of many tiles. But from the
engine's perspective, it's just getting a big ass background image. Then, in the
editor, you paint some simple geometry over that picture for where the walls
are. 

The upside of no tiles:
You don't have to think about the tile coordinates of your game. 
Authoring dungeons will be a lot easier, visually, in a tool like Aseprite.
Less data to save and load.
Less geometry in the game (although, you could still do the draw-bounding-boxes
approach no matter what you do with tiles).
At the end of the day, this is just the background. If you have some special
tile that you want to do something, just code it as an entity. 
** 09/04/2020: what's next
How do I use images as level backgrounds?
I want to be able to extend the image without having to totally change the
geometry every time. Obviously, if I change something that exists, I'll have to
manually change the geometry. But if I, say, add a few new rooms to the level, I
don't want it to render in such a way that all the geometry is in the wrong
place. 

One solution is to make some corner of the image as the absolute (0, 0). When
you want to extend the image, you extend it away from that corner (farther out
into the quadrant). A problem with this, though: If the bottom left is your
(0, 0), then you can never go below or behind that. One way you can solve that
is to start map images as very large. And don't start drawing in the bottom
left. I mean, that would probably work. Simpler: Every map has the same size. If
you have some dungeon or map or something that is too large, just split it into
two. Be clever. If every map is the exact same size, that makes everything
pretty damn simple.

1024 x 1024 would probably work.
** 10/02/2020: anew
here's what you're gonna do. pick a feature, implement it, have fun doing
it. this is something that you do to have fun and learn about programming. and
there's nothing wrong with that. 

this is the first feature: i want to load up an image of a fixed size. i want to
be able to use the editor to draw simple geometry over that image. i want that
geometry to be hooked up into the physics engine. then, i want that geometry +
image to be saved out as part of the level. simple as that -- don't want to
worry about what else goes in a save file, or how it gets serialized. 
** 10/03/2020
@render_refactor
so loading up the image and rendering it forced me to fix the internal
resolution stuff. i'm happy about that! some notes from that:

when we load the image to bake the texture atlas, we record its height and
width. then, when we render, we check the height and width against the internal
screen resolution, which will spit out what fraction of the screen it should
take up. 

one problem with this is that we're calculating that fraction every time

another problem is that there's no way to scale up a particular instance of
rendering a sprite. that's not a problem, because we don't need to do that, but
it is kind of weird.

the render code is doing that calculation. is that the right place for it? how
much processing should the render engine be doing? it's also building the
transform for the thing. also it has the camera...? but i guess the camera
really only effects the viewport. kinda feels like it should just be sorting the
structs and then issuing GL commands

speaking of issuing GL commands, we're issuing a glDrawElements for every
sprite. not sure how that's going to pan out. rendering a 1920x1080 thing
dropped my framerate by about 20%. 

when i'm not building the texture atlas on startup (which would be a good thing
to do soon, since that actually adds noticeable startup time), i need to write
some metadata about my assets. the program will do pretty much what it does now,
but instead of actually adding assets to the tree, we'll just write out the
height, width, number of channels, texcoords to a file. we can also dump all the
texture coordinates into an array. then you can loop over that and add all the
sprites, and just grab a pointer to the texture object and give em back to the
sprite.

one thing i'm realizing is that you have to store your entities as data. you
can't touch them in the level editor if not. reason i'm thinking about this: if
i want to add level geometry to the level, save it, and load it back, i have to
load back in at least the position and size of those boxes. 

oh, also, now is the time where i need to have several entities of the same name
existent at the same time. 

plus, if i want to do stuff like draw bounding boxes over things and move shit
around, i mean that has to go in data that gets loaded up. need to do some
design on this -- have the idea of unity prefab floating around in my
mind. because there's some data that never needs to be saved/loaded. for
example, what your animation data is. but then there's some data that pretty
much always needs to be loaded, like your position. n then how we store it -- it
would be fucking awesome to store all the data as lua scripts. there is surely a
way to do this thing. i don't want to pull in and compile a stupid json parser. 

so that's tomorrow i guess!
* gameplay
** game 2
*** august 11, 2020
ok, fuck, let's do this. jonathan blow was playing some sweet looking indie
puzzle game. it looked like super mario world. i can do that. I can do that!
there are too many ideas brewing in this head to let them sit there, and i want
to make a small video game. i want to make a small RPG. 

complexity is born from composing simplicity. simple mechanics can make a fun
game. what are the mechanics of an RPG? 

a type chart
stats
moves
move power
split attack / defense || special attack / special defense
a team of characters
STAB
items
passive abilities
limit breaks
HP 
double battles

problem with modern JRPGs: grind. they either compose too many simple systems,
or compose complex systems. so you have to spend time to  a lot of timlearn them
before you are really playing The Game. before that, you are playing A Game, but
one that is simple and dull. satisfaction comes from making a strategy and
executing it. 

the game should have permanent death. maybe not of characters, because that can
cause degenerate strategies to be optimal (see: fire emblem). but maybe
yes. permanent death is a tradeoff. on the one hand, there are real stakes. it
is annoying to start over, and you are incentivized not to experiment lest it
fails and you die. but on the other hand, if there is no permanenet death, there
is no incentive to form good strategies. you can simply try new strategies over
and over. there is no fear as a real commander feels when his troops may die. so
what is the game trying to invoke? what is it that i enjoy most about the role
playing game? i enjoy the pit of mind against mind. the pre-game strategy, i
never quite enjoyed as much. i like going into battle and knowing my cards and
knowing their cards (for the most part) and tricking them. outwitting them. so i
would like to make a game where you can outwit. that's hard with AI. 

if the player in any way becomes weaker after losing a fight, that feels like
poor game design. how will the player overocome what just defeated him when he
is weaker than when he was defeated? 

if the player does not lose something after a fight, what incentive do they have
to win the fight? 

permadeath is good when the game is intended to be restarted frequently. but to
do that, you need some kind of procedural generation. that makes it hard to
handcraft content and avoid grinding. i want the player to be able to experiment
with different strategies. 

what about the above, but instead of procedurally generated pushing and popping,
you merely cycle through lives? what is the gameplay element of this?

(a brief aside) teaching players by guiding them
the player faces a creature that constantly heals, and must learn to use taunt
the player faces a creature that damages itself, and must learn to stall
*** august 12, 2020
check out the first picture here: https://saint11.org/blog/pixel-art-tutorials/
the black and white graphics are really awesome. just like that elias daler game
that uses four colors and is very pretty. see it here:
https://eliasdaler.github.io/tomb-painter-first-dev-log/

four colors, four colors. i can do that. 

here's an idea i had in the shower. it's similar to the idea that starts this
file. RPGs are complicated, and that's what people think makes them fun. but
what makes them fun is not complexity, but depth. related ideas, but
different. ultimate is complex -- dozens of mechanics, 80 characters, hundreds
of moves. melee is deep. now that i think about it, what are the core mechanics
of melee?

aerial attacks
grounded attacks
projectiles
shield
crouch cancel

grab/throw

jump
wavedash
ledge cancel
dash

ledge
stocks/percent
blast zones
l cancel

and that's splitting it up a lot. most of those are the RPS of
shield/grab/attack, and then movement options. that covers like 2/3 of the
game. and there's like 12 characters. but combining these things, and the fact
that you can do almost any of them out of any other of them makes it so
deep. what's a similar list for RPGs?

stats
moves
creatures
switching

types
physical/magical attacks
abilities
items
healing
boss battles
wild encounters
trainers
dungeons
leveling up/experience
evolution

i don't think that i would want to go without creatures. creatures have to be
differentiated -- i think stats and attacks have to be included. the type chart
is one of the most complex things in an RPG, and i don't think i've played one
after pokemon where i legitimately understood the type system. but you need to
have flavors, you need to have something more to differentiate them. maybe the
type system isn't something that changes damage output. maybe different types
give you different passives. or maybe it gives you access to different skill
trees. for example: every type has access to the same moves? but then that would
get much too samey. still kind of thinking competitive here. competitively, you
want to have options and mixups and hidden information. that's not as relevant
in a single player game. there, you want each battle to present a specific
challenge, a specific strategy that the player must overcome. some strategies
are plain. for example, if you had a rain dance team. some are more complex: for
example, a toxic spikes team. a good rpg forces players to form and process new
strategies at the perfect rate. let them lean on some tried and true strategies,
but force them to adapt to new wrinkles in it. 

what about a game where all you do is battle? like the battle tower. 
what about a game that is almost entirely a couple of dungeons? 
what about a game that is one long tunnel? (undertale)
what if it had elements of randomization or proceduralism?

i like it undertale style. a long tunnel. oh, also, another fun part of RPGs:
dungeons! where you need a meta strategy: not something for inside the battles,
but for managing the battles themselves. 

small idea: a boy who hears voices. the voices are spirits crossed over, and
some can be harnessed to do battle. you can embrace the madness to gain more
power, but you become unhinged. hollow ichigo.

another idea: a school deal. maybe with spirits, maybe keeping the original
hollow ichigo idea where power begets insanity. but the idea is a sixth grader,
new, who is getting bullied. maybe the school is an anime style thing where they
go to learn about battling creatures? or maybe the creatures are just the
manifestations of the other kids in the spirit world, and the player can dip
into that world, and the farther the player dips into the world the more they
lose their sanity.

what if, in the anime style, they're making fun of him for how weak his
creatures are, but they have some ridiculous name

/ha ha ha/, PLAYER, you came with THAT dodecabakumon? You're such a LOSER! /ha
ha ha ha ha/

*** august 13, 2020
eight hours feels right for this game. each dungeon is about two hours, throw in
some time for exposition and feeling out the mechanics at the beginning of the
game. 

NO TYPE SYSTEM.

no evolution? on the one hand, it is cool to see the creature you raised from
birth get super strong. on the other hand, it's a confusing mechanic for a short
game. i mean, the fact that magikarp turns into gyarados is hilarious and i
wouldn't have it any other way, but it's a big ask for the player to just figure
out on their own that they should train a magikarp to level 30. and if the
essence of the game is planning and dungeon crawling, how are they supposed to
plan for that?

pseudo randomization: be able to hot swap out different strategies for each
dungeon or for subsections of each dungeon. they'll maintain the same feel and
goals, but you could get a ton of variety for very cheap by just e.g. switching
up the order different challenges get thrown at you. 

really feeling for permadeath, but maybe with an extra mechanic that allows you
to bypass it under some circumstancs. like with reversing the time in FE3H --
although that is a little more powerful than what i would like. you need to keep
the difficulty low in the beginning to compensate for this. 

keep the core set of things small: few moves, few creatures. don't overwhelm
them. create simple, versatile moves that let you compose higher strategies. 

introduce ideas slowly. the player should never see a powerful new move or
strategy in its full form on the first time. you need to slowly morph the
player's idea of the strategies available to them. in the toxic dungeon: show
them what poison is, allow them to recover from it. show them how they can
prevent nondamaging moves with taunt. 

maybe some kind of RPS core mechanic? the thing with shield grab attack in melee
is that it is deep because of timings. you can punish whiffs with grabs, but you
can punish bad grabs with attacks. so while at the simplest level, it is an RPS
that is easy to understand, it becomes deeper at every level. a lot of that has
to do with analog things like spacing and rhythm. how do you replicate that in a
turn based game?

the ability to hot swap moves -- unlike pokemon. if the goal is to test them
strategically, why completely lock them into one set of choices to execute their
strategy? on the other hand, too much freedom lets them ignore strategy in favor
of hyper specialization. perhaps a meter that limits your change, or something
that rewards you for staying with the same team composition?

what is the RPS? is it in the game (shield grab attack), or is it meta (offense
balance stall)? what if it was all doubles? doubles has a lot more of the
RPS. what about attack / defend / grab? attack beats grab beats defend beats
attack. you need to make defending an option that does more than just stall for
a turn. core mechanic wise, not depth wise.
idea: defending an attack stuns you for a turn
idea: defending an attack cuts your stats for a turn
idea: defending an attack acts like using roar
idea: defending an attack causes the attacker to take damage


can think of a lot of ways to make this deep:
attacks can have different potencies on defending. 
defending multiple times weakens the defense (% chance to fail or reduced damage
soak)
passives that make attacks bypass defense in some way

passives are a good way to give depth to the rps. 
*** august 24, 2020
how do you win games defensively? if you choose to stall, what is your win
condition? in pokemon, it's setting up entry hazards and forcing people to
switch. spreading status. bulky stat boosters. i feel like making the 'block' do
damage could be counterintuitive. if it does chip damage -- what do you do next?
would shaving off an eighth or a quarter really do that much, especially if
(when) there are mechanics in place that makes block spamming not work. it needs
to be something that puts pressure on the offensive player to act. 

is toxic + block going to be overpowered? one thing is that that takes two move
slots. plus, offensive players have options -- stat boosts, free switches,
abilities. it might be UNDERpowered. i think blocks doing some base amount of
damage on success plus whatever passives to spice it up is a great start. 

** types
The types are, flavor wise, supposed to represent the reflections of different
pure forms onto the physical realms. All things exist purely through dogma. The
precise qualities that make anything itself come from this. When they're
filtered down to the physical plane, some of these characteristics get lost. 

Battles involve creatures that are powerful manifestations of these traits. They
are also filtered when they enter our world, but their concentration is much
higher and they are therefore a more distilled representation of them. Because
they are so distilled, they can tap into other aspects of that trait that
regular things could not -- namely, pulling that essential force for battle. 

** [LG] logic
The intelligence of man. 

This type is good at indirect attacking. The first thing that means is that its
attack-oriented creatures are good at special attacking. No grapplers here. The
second thing is that its creatures get good support moves. 
- Stat boosting moves
- Substitute
- Baton Pass
- Trick Room
- Roar

Their typing defensively is a pretty clean 50. Their typing offensively is
probably closer to a 60, preferring to use power over type coverage to get the
job done
** [DS] dark spirit 
The evil nature of man. Corruption, greed, sloth, sadism, power, intimidation.

This type has a lot of offensive support moves and a lot of mix ups. Solid
STAB moves with fair coverage, but mostly based around the idea that you can
morph them into a lot of things. This would be a good place to have a utility
creature that can sweep or take on a number of specialized defensive roles. 

Inspirations:
Taunt Wisp Mew
BW Gliscor
BW Sableye
ADV Gengar
DPP UU Crobat
DPP UU Froslass

- Taunt
- Will-o-Wisp
- Explosion
- Destiny Bond
- Knock Off
- Pain Split
- Trick
- Drag Down (Ability): On turns where this creature uses a support move before
  an opponent can attack, creature takes half damage. 
- Spite (Ability): Any creatures active at the end of the turn lose 1/16th of
  their health, including this one. 
** [LS] light spirit
The good nature of man. Soft kindness, mothering, empathy, joy.

This type is where your pink blobs live. It has a lot of defensive support
moves. They don't carry momentum well in and of themselves, because they lack
the tools to directly pressure the opponent. Instead, they try to slow the game
down and remove key threats from the game. 

Defensive Dragonite

- Wish
- 50% recovery
- Seismic Toss
- Aromatherapy
- Encore
- Screens
- Calm Mind
- Good coverage but poor offensive stats
- Natural Cure
- Regenerator
- STABs that have useful secondary effects (e.g. Scald)
- Resilience (Ability): All passive damage done to this creature is halved. 
- Gift of Health (Move): Instantly heal 1/4 of any teammate's health
- In Tune (Ability): When this creature heals, it receives 1/10 more health than
  normal. 
** [RS] red spirit 
The passionate nature of man. 
** [EA] earth
The essence of physical material. (might make this a 'materia' type, give
different flavors like air and water)

This type is all about the physical attacks. Low special stats, both offensively
and defensive. Flavor-wise, focuses on moves that manipulate the non-living
material of the Earth. Earth will be a really good typing defensively and
offensively. Offensively, the problem will be that they don't get good coverage
moves -- maybe something like Rock Slide + Earthquake in ADV, but even that
might be a little too good. One or two key weaknesses that you can exploit (one
physical, one special?).

Inspirations:
BW Landorus-T
BW Excadrill
ADV Flygon

- Earthquake
- Swords Dance
- Lead Smoke (Move): The next creature to enter the field will lose 1/8 of its
  health
- Rock Slide
** [MC] machinery
You ain't machine and you ain't land. Machines are more organized than the chaos
of material, yet their organization holds a cold acid edge that is not truly
alive. Creatures of machine are extreme. They do few things, but they do them
well. Their stat spreads are heavily skewed to one of the few things that they
do, and so are their movepools. Their defensive typing is poor, but their
offensive typing is very good. They are bound by almost all things -- water,
material, human nature and ingenuity -- but at the same time they bind these
things as well. 

Visually, they'll all look like machines, but mechanically they'll focus on one
or two aspects of the game and be really good at that and pretty bad at
everything else. It will be hard to make these usable.

Inspirations
DPP Azelf
ADV Magneton
BW Bronzong
DPP Lucario
BW Gothitelle
ADV Forretress
BW Sableye

One that focuses on entry hazards
One that fucks up a fairly common defensive type
Glass cannon sweepers 
Suicide leads (hazards/screens/boom)

** [FR] fire
** [WA] water
necrotic? 
the mountains
god 
psychedelics
philosophy
science
art
fire
cells
ice
electricity
time
void -- things that completely lack type 
psychosis
animals
sages
** [FA] fauna
The spirit of the animal. Brutish, petty, yet surprisingly clever at
times. These are things that can hit you pretty good. Usually not a ton of
tricks up their sleeve -- they might have mixups, but it'll be clearer what
their options are from the things around them (e.g. pretty easy to spot a mix
lax). 

Inspirations:
ADV Tyranitar
ADV Metagross
ADV Snorlax
ADV Heracross
DPP Gyarados
** [FL] flora
The spirit of floral nature.

Inspirations:
Ferrothorn
Celesteela
Tornadus-Therian

This type is all about momentum (think about the beautiful flowing momentum with
which plants live). Floral types get lots of annoying support moves and
abilities
- Leech Seed
- Protect
- Toxic
- Stun Spore
- Toxic Spikes
- Spikes
- Iron Barbs (physical / special)
- Sap (Ability): Transfer 6% health from opponent to user at the end of each
  turn.
- Return to Nature (Ability): Every turn, regardless of whether this creature is
  active, it gains 1% of its health back
- Knock Off
- 50% Recovery

Their operating principle is to, at worst, make a trade. Every time a Floral is
on the field, SOMETHING should be happening to your advantage (even if the turn
itself is a net negative). 

** [DG] dogmatic
The pure essence of dogma. 

This type is the most well rounded type in the game. It provides a few well
rounded STAB moves, but more importantly offers key resistances and few
weaknesses which makes it highly sought after defensively. Dogmatic creatures
generally rely on their potent movepools to output lots of damage, and they use
their good typing to be excellent checks to other offensive threats. 

Inspirations:
BW Latios
BW Hydreigon 
BW Garchomp
ADV MixMence (closer to this in terms of power)
DPP Tyranitar

- Fire Blast
- Draco Meteor
- Brick Break
- A few weak but really useful coverage moves for mix-ups
- 100/90/90 defenses

** type chart
|    | LG | DS | LS | RS | EA | MC | FR | WA | FL | DG |
| LG |  0 |    |    |    |    |    |    |    |    |    |
| DS |    |  0 |    |    |    |    |    |    |    |    |
| LS |    |    |  0 |    |    |    |    |    |    |    |
| RS |    |    |    |  0 |    |    |    |    |    |    |
| EA |    |    |    |    |  0 |    |    |    |    |    |
| MC |    |    |    |    |    |  0 |    |    |    |    |
| FR |    |    |    |    |    |    |  0 |    |    |    |
| WA |    |    |    |    |    |    |    |  0 |    |    |
| FL |    |    |    |    |    |    |    |    |  0 |    |
| DG |    |    |    |    |    |    |    |    |    |  0 |

** moves
- Screens
- Wisp
- Toxic
- Thunder Wave
- Sleep Powder
- Refresh / Heal Bell
- Substitute
- 50% recovery
- Rest
- Haze
- Protect
- Perish Song
- Taunt
- Destiny Bond
- Focus Punch
- Baton Pass
- Doom Desire
- Encore
- Explosion
- Fake Out
- Hidden Power
- Magic Coat
- Memento
- Healing Wish
- Trick
- Pain Split
- Skill Swap
- Super Fang
- Thief
- Giga Drain
- Sedate (Light Spirit): User cannot use any attacking moves for two
  turns. Always goes last. 
* plot
Open up in an everyday elementary school. Rows of particle boards desks, wide
rectangular fluorescent lights, concrete painted white on all four sides. The
kids are all sitting, faces down intently at their exams. They can't be more
than ten or eleven years old. One boy nervously chews a pencil while he tries to
work out how to add fractions for the hundredth time. All is as it should be.

Except there is pre-pubescent trouble brewing. D. Boon, glasses thick as
coasters, rail thin, slightly hunched shoulders, sits at his desk trying
desperately to pretend that he hasn't finished his exam. He traces his pencil
around the same section of the page, writing, erasing, leaned over in feigned
concentration. But he's not doing a very good job of it, because he feels
something damp stick against his shoulder. The dreaded spitball. It would seem
like someone else is finished with their test too -- finished, or doesn't care.

"Lemme see your /answers/, Boon." It's O'Doyle. He's big for his age, already a
solid five nine, and fat to boot. His face shows the promise of acne, his
jawline the promise of coming in -- puberty is soon to come to him. But for now,
his malice is merely that of a childhood bully. Nothing so insidious as the
social schemes of high school. 

O'Doyle is a regular thorn in Boon's side. He's smart enough to know how to push
Boon's buttons -- not just some brainless mudslinger. And more importantly, he's
physically imposing. He's always saying some shit to him, not just isolated
incidents of violence. 

"..." 

Boon stares ahead intently, focused /hard/ on not reacting. He wants to get the
teacher's attention, but she's slumped back in her chair, dozed off reading a
novel with a well-oiled Scottish man on the cover.

/Just don't say anything and he'll go away/

"Come on Boon, if I don't pass the fifth grade my dad'll /beat/ me." He delivers
it with the quality of a joke he knows is too black for someone his age.

A soft poke comes from from Boon's other side. "Yeah, Boon, I need the answers
too. Heh heh." Tweedle-dee and Tweedle-dum, O'Doyle and Levi. Dynamic duos for all
time. Levi is a /lot/ dumber than O'Doyle, but also morbidly larger and
decidedly meaner.

POKE. The first one just got his attention, but the second one breaks
skin. "STOP," Boon can't help but cry out in pain and frustration. The teacher
snaps awake. 

"WHAT is going ON? You're supposed to be taking a test!"

Boon doesn't say anything -- he knows she won't punish him, but he doesn't want
to deal with the two of them. He puts his head down and shrugs
half-heartedly. O'Doyle and Levi find a sudden interest on the cement blocks on
the other side of the room. Mrs. Miller sees their guilt and says, "Let me speak
to the three of you. After class."

--- 3 PM

Cut out, cut back in. Mrs. Miller is finishing up some lesson, but the bell cuts
her off before she has a chance to finish. Boon tries to slip out quickly, but
she catches him. She sits the three of them down in the front row and starts
asking questions. The story comes out -- she takes Boon's side, of course, as
the sweet, bright boy. She asks to see Boon's side, and when she sees a prick of
crusted over blood, she becomes serious. 

"This is worse than I thought. You realize what this means, right? This means
you committed a /violent act/. I have no choice but to suspend you both for a
week."

"A week?!", O'Doyle cries out. "But my dad's going to kill me! Please,
Mrs. Miller, I'll do anything, I'll even apologize to Boon here. Watch: Boon,
I'm sorry." 

"I'm sorry, Richard, but there's nothing I can do. It's county policy. Now you
kids go before the buses leave."

--- Outside the classroom

Boon hangs back for just a minute, tying his shoe more slowly than he ever has
before. He finally leaves, starts down the hallway, and almost makes it to the
bus parking lot. But he gets stopped -- by who else? And they're mad, this
time. 

"I'm done screwing around. I'm gonna show you what happens when you screw with
someone you shouldn't!"

Levi sneers at him and pushes him in the locker. O'Doyle throws a sucker punch
as Boon cowers back into the wall of lockers. Levi picks him up and disables
him by putting him in a bear hug. They walk the way they came from, past a few
classrooms, and stop before a janitor's closet.  

"It's Friday. Let's see how you like being suspended this weekend."

With that, he throws Boon into the closet. His vision is starting to fade. On
the ground, he sees Levi walk up and loom over him. He didn't realize how big he
was. He wonders if his dad is disappointed that he's not bigger. He wonders
what's for dinner. How's he going to turn his homework in tomorrow? Wait, isn't
tomorrow Saturday? Or is it Tuesday? He barely has time to realize that he's
blacking out when Levi rears his heavy, booted foot back and and gives him

One.

Last.

KICK.

"Don't mess with me, son."

--- An Indeterminate Amount of Time Later

Boon wakes up. He's in a place that looks like 

all of this twisted world is a school -- of course it is. dungeons are made of
wings of the school. limbo, then the lower classmen, and then finally: the eigth
graders. the big shits. each dungeon is made of rooms of the school. classrooms
where students and damned teachers reside. the janitor's closet, which might
have an enemy like a huge lice. the nurse's office. 

you must make it to the principal's office at the end of eighth grade hall to
battle the final boss


LIMBO. 
it's a place where the souls of fifth graders are trapped when they
can't ascend to middle school. some of them got held back -- their minds and
souls couldn't recover socially from being a sixth grader in fifth grade. some
of them moved away and could never adjust to their new lives, clinging to the
brief happy days at the end of their childhood. some of them died. but for
whatever reason, their souls remain here at the bridge between fifth grade and
sixth grade. 

what kind of places would be in limbo? well, all kinds of places. it's places
that people could not move on from, for some reason. their favorite teacher's
class room. the basketball court where they had to feel so physically
inadequate. it's the turnaround where they had to wait for their abusive father
to arrive, drunk, to take them home. it's where they took the math test that
made them feel permanently stupid. it's the lunch room where they felt socially
isolated for months on end. 

everything is a little bit backwards in limbo. the music is geogaddi, off center
dissonance that warbles around a specific note. rewound tape loops. maybe the
rest of the game has some goofy darkness, but i don't know about this place. i
guess now is a good time to think of the tone of the game more. on one hand, i
like the idea of something dark and lonesome and low and a bit unsettling, blues
and earthy algae spaceship faux organic greens, warbling synthesizers, sinister,
lost. like a neil gaiman comic. but i also love how absurd it sounds to battle old
headmasters and science teachers and jocks like they're animals. they lose some
human part of themselves which makes them hold back, but they retain enough to
be recognizable as human. the fact that they are taking it as a serious eternal
struggle when they're really just locked in a meaningless fight commanded by a
fifth grader is grimly hilarious. also like a neil gaiman comic. i don't want to
lose that for the sake of being Grim Dark. 

i think one of the best things undertale did was have dialogue scenes. you don't
have to be able to say anything meaningful (altho in undertale you could). just
the fact that they are talking to you, doing more than just walking over and
battling, that's awesome. 

i do want this game to be funny. simple and funny. 

who's your sidekick? definitely some former person at the school. what about a
fourth grader. one who was killed at the school in some violent (but ultimately
accidental) way. he's very meek, timid, and proper. he wants to avoid offending,
but he's also been around for a /long/ time, so he's actually quite savvy as to
how things work down here. 

something isn't right here. it's twisted, inverted. things have a set way of
working here, and it's becoming /wrong/. turns out, that thing is levi and
o'doyle becoming the kings of hell. they're the final boss.

you have some sidekick who cheerfully tells you about the world you
inhabit. maybe they could even be your starter? 

creatures are the souls of everyday things. simple things, maybe even things
that aren't jazzed up at all. like, a dog that is just a dog. a chair. slightly
anthropomorphic, maybe. 

if that's the case, how do you differentiate creatures? you can't have lamp learn
fire blast but not ice beam -- how do you reconcile that? could i pare down some
of the types i have? actually, ditching types might not be a bad idea. or make
the type system another RPS. that way you have two simple RPS stacked on top of
each other. either way, struggling with the idea of how to give meaningful,
simple competitive flavor when the creatures are literally things like a fucking
table and a chair. 

ordinary things: table, chair, basketball, jacket, pencil

OOH

what if instead of the creatures being ordinary things, they are the spirits of
people who were left behind 

and the fact that multiple people can control them is because their soul splits
and shards -- it's not whole, so it can't be conscious, but each part of it
contains enough of them to be selfsame.

let's make the type RPS visually simple. what about jocks > nerds > teachers? or
something more complicated: the damned (souls that are tragically trapped at the
school), the unborn (souls that never matured enough to leave the school), the
normals (souls attached to a real, active student in the material world). but
that doesn't quite make sense -- normal souls aren't going to be creatures
here. will they? it would be pretty fucking funny if you could catch and train
dylan driver. 

the damned are good at attacking. they are angry and resentful, and they want to
hurt you as they have been hurt.

the unborn are good at grabbing. they are immature. they could never stand on
two solid feet and make it in life. they're just grabbing at whatever they can. 
 
the normals are good at defending. they don't want to be pulled into the world
of souls -- they enjoy living. so they are built to do that. 

